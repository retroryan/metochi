/*
 * Copyright 2016 Grand Cloud, LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// 1. Review the syntax, package, and options
syntax = "proto3";

option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package metochi;

// 2. Review the message definitions

//A Transaction is the message that is embedded in the blockchain
message Transaction {
    string uuid = 10;
    string message = 20;
    string sender = 30;
}

message Block {
    int32 index = 10;
    string creator = 15;
    string hash = 20;
    string previousHash = 30;
    google.protobuf.Timestamp timestamp = 40;
    repeated Transaction txn = 50;
}

message Blockchain {
    repeated Block chain = 10;
}

message BroadcastMessage {
    Block block = 10;
    string sender = 20;
}

//This message is used during Proof of Authority to propose an authority round
message ProposeRequest {
    string nodeName = 10;
}

//This message is used during Proof of Authority to response to a proposal.
message ProposeResponse {
    bool accepted = 10;
}

// 3. Review the service definitions
service BroadcastService {

  rpc InitializeGenesisBlock(Block) returns (google.protobuf.Empty);

  rpc Broadcast (BroadcastMessage) returns (google.protobuf.Empty);
  rpc QueryLatest(google.protobuf.Empty) returns (Block);
  rpc QueryAll(google.protobuf.Empty) returns (Blockchain);

  //These definitions are used for the Proof of Authority blockchain
  rpc broadcastTransaction(Transaction) returns (google.protobuf.Empty);
  rpc propose(ProposeRequest) returns (ProposeResponse);
}


//4. Streaming

enum MessageType {
    JOIN = 0;
    LEAVE = 1;
    MESSAGE = 2;
}

message NewMessage {
    MessageType type = 1;
    string message = 11;
}

service BlockStreamService {
    rpc streamBlock(stream NewMessage) returns (stream Block);
}
